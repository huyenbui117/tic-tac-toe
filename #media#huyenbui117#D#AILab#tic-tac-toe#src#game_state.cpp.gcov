        -:    0:Source:/media/huyenbui117/D/AILab/tic-tac-toe/src/game_state.cpp
        -:    1:#include <vector>
        -:    2:#include <string>
        -:    3:#include <algorithm>
        -:    4:
        -:    5:#include "tictactoe/game_state.h"
        -:    6:
        -:    7:// Get final message to display when game is over
function _ZNK9GameState15getFinalMessageB5cxx11Ev called 24 returned 100% blocks executed 63%
       24:    8:std::string GameState::getFinalMessage() const
        -:    9:{
       24:   10:    switch (finalScore) {
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 25%
        6:   11:        case 1: return "X wins";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        6:   12:        case -1: return "O wins";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        6:   13:        case 0: return "It is a draw";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        6:   14:        default: return "Unknown";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:   15:    }
        -:   16:}
        -:   17:
        -:   18:// Play the game on the given position
function _ZN9GameState19playAndChangePlayerEii called 12 returned 100% blocks executed 57%
       12:   19:void GameState::playAndChangePlayer(int i, int j) {
       12:   20:    thinking = true;
       12:   21:    if (i >= 0 && i < SIZE && j >= 0 && j < SIZE 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      24*:   22:        && getPlay(i, j) == ' ' && !gameStop) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
       12:   23:        setPlay(i, j, currentPlayer);
call    0 returned 100%
       12:   24:        togglePlayer();
call    0 returned 100%
       12:   25:        checkAndProcessFinalState();
call    0 returned 100%
        -:   26:
        -:   27:        // If the game is not over and the play mode is HumanVsMachine
        -:   28:        // then play the computer move
       12:   29:        if (!gameStop && playMode == PlayMode::HumanVsMachine) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   30:            std::pair<int, int> nextMove = getComputerPlay(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   31:            setPlay(nextMove.first, nextMove.second, currentPlayer);
call    0 never executed
    #####:   32:            togglePlayer();
call    0 never executed
    #####:   33:            checkAndProcessFinalState();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   34:        }
        -:   35:    }
       12:   36:    thinking = false;
       12:   37:}
        -:   38:
function _ZNK9GameState7getPlayEjj called 12 returned 100% blocks executed 100%
       12:   39:char GameState::getPlay(unsigned int i, unsigned int j) const
        -:   40:{
       12:   41:    return s[i][j];
call    0 returned 100%
call    1 returned 100%
        -:   42:}
        -:   43:
function _ZNK9GameState7getPlayEii called 12 returned 100% blocks executed 86%
       12:   44:char GameState::getPlay(int i, int j) const
        -:   45:{
       12:   46:    if (i >= 0 && i < SIZE && j >= 0 && j < SIZE) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       12:   47:        return getPlay(static_cast<unsigned int>(i), static_cast<unsigned int>(j));
call    0 returned 100%
        -:   48:    } else {
    #####:   49:        return ' ';
        -:   50:    }
        -:   51:}
function _ZN9GameState12togglePlayerEv called 12 returned 100% blocks executed 100%
       12:   52:void GameState::togglePlayer()
        -:   53:{
       12:   54:    currentPlayer = (currentPlayer == 'X') ? 'O':'X';
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       12:   55:}
        -:   56:
function _ZN9GameState17computerPlayFirstEv called 0 returned 0% blocks executed 0%
    #####:   57:void GameState::computerPlayFirst() {
    #####:   58:    thinking = true;
    #####:   59:    std::pair<int, int> nextMove = getComputerPlay(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   60:    setPlay(nextMove.first, nextMove.second, currentPlayer);
call    0 never executed
    #####:   61:    togglePlayer();
call    0 never executed
    #####:   62:    checkAndProcessFinalState();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   63:    thinking = false;
    #####:   64:}
        -:   65:
function _ZN9GameState9resetGameEv called 0 returned 0% blocks executed 0%
    #####:   66:void GameState::resetGame()
        -:   67:{
    #####:   68:    s = State(SIZE, Row(SIZE, ' '));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:   69:    gameStop = false;
    #####:   70:    currentPlayer = 'X';
    #####:   71:    finalScore = -10;
    #####:   72:}
        -:   73:
        -:   74:// Check if the game is over and update the final score
function _ZN9GameState25checkAndProcessFinalStateEv called 30 returned 100% blocks executed 67%
       30:   75:void GameState::checkAndProcessFinalState() {
       30:   76:    if (isFinalState(s)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 60% (fallthrough)
branch  6 taken 40%
call    7 never executed
call    8 never executed
       18:   77:        finalScore = getScoreFinalState(s);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       18:   78:        gameStop = true;
        -:   79:    }
       30:   80:}
        -:   81:
function _ZN9GameState13getNextPlayerESt6vectorIS0_IcSaIcEESaIS2_EE called 0 returned 0% blocks executed 0%
    #####:   82:char GameState::getNextPlayer(State b)
        -:   83:{
    #####:   84:    int countX = 0, countO = 0;
    #####:   85:    for (unsigned int i = 0; i < SIZE; i++) {
branch  0 never executed
branch  1 never executed
    #####:   86:        for (unsigned int j = 0; j < SIZE; j++) {
branch  0 never executed
branch  1 never executed
    #####:   87:            if (b[i][j] == 'X') countX++;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   88:            else if (b[i][j] == 'O') countO++;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   89:        }
        -:   90:    }
    #####:   91:    if (countX == countO) return 'X';
branch  0 never executed
branch  1 never executed
    #####:   92:    else return 'O';
        -:   93:}
        -:   94:
function _ZN9GameState4playESt6vectorIS0_IcSaIcEESaIS2_EEjjc called 0 returned 0% blocks executed 0%
    #####:   95:GameState::State GameState::play(State b, unsigned int ii, unsigned int jj, char player)
        -:   96:{
    #####:   97:    State newState = State(3, Row(3, ' '));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####:   98:    for (unsigned int i = 0; i < SIZE; i++) {
branch  0 never executed
branch  1 never executed
    #####:   99:        for (unsigned int j = 0; j < SIZE; j++) {
branch  0 never executed
branch  1 never executed
    #####:  100:            newState[i][j] = b[i][j];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  101:        }
        -:  102:    }
    #####:  103:    newState[ii][jj] = player;
call    0 never executed
call    1 never executed
    #####:  104:    return newState;
        -:  105:}
        -:  106:
function _ZN9GameState7setPlayEjjc called 12 returned 100% blocks executed 100%
       12:  107:void GameState::setPlay(unsigned int i, unsigned int j, char player)
        -:  108:{
       12:  109:    s[i][j] = player;
call    0 returned 100%
call    1 returned 100%
       12:  110:}
        -:  111:
function _ZN9GameState7setPlayEiic called 12 returned 100% blocks executed 100%
       12:  112:void GameState::setPlay(int i, int j, char player)
        -:  113:{
       12:  114:    if (i >= 0 && i < SIZE && j >= 0 && j < SIZE) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       12:  115:        setPlay(static_cast<unsigned int>(i), static_cast<unsigned int>(j), player);
call    0 returned 100%
        -:  116:    }
       12:  117:}
        -:  118:
function _ZN9GameState15getComputerPlayESt6vectorIS0_IcSaIcEESaIS2_EE called 0 returned 0% blocks executed 0%
    #####:  119:std::pair<unsigned int, unsigned int> GameState::getComputerPlay(State b)
        -:  120:{
    #####:  121:    char player = getNextPlayer(b);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  122:    std::pair<int, State> p = getScore(b, player=='X');
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  123:    State newState = p.second;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  124:    const unsigned int INVALID = 100;
    #####:  125:    for (unsigned int i = 0; i < SIZE; i++) {
branch  0 never executed
branch  1 never executed
    #####:  126:        for (unsigned int j = 0; j < SIZE; j++) {
branch  0 never executed
branch  1 never executed
    #####:  127:            if (newState[i][j] != b[i][j]) return std::make_pair(i, j);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  128:        }
        -:  129:    }
    #####:  130:    return std::make_pair(INVALID, INVALID);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  131:}

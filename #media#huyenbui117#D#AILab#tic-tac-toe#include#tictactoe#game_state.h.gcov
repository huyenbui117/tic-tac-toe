        -:    0:Source:/media/huyenbui117/D/AILab/tic-tac-toe/include/tictactoe/game_state.h
        -:    1:#ifndef GAME_STATE_H
        -:    2:#define GAME_STATE_H
        -:    3:
        -:    4:#include <vector>
        -:    5:#include <string>
        -:    6:
        -:    7:/**
        -:    8: * @brief GameState class
        -:    9: * This class is responsible for storing the state of the game
        -:   10: * and providing the logic to play the game.
        -:   11: */
        -:   12:class GameState
        -:   13:{
        -:   14:public:
        -:   15:    enum class PlayScreen {
        -:   16:        PlayModeScreen,
        -:   17:        PlayingScreen,
        -:   18:    };
        -:   19:
        -:   20:    enum class PlayMode {
        -:   21:        HumanVsHuman,
        -:   22:        HumanVsMachine,
        -:   23:    };
        -:   24:
        -:   25:    static const int SIZE=3;
        -:   26:
        -:   27:private:
        -:   28:    typedef std::vector<char> Row;
        -:   29:    typedef std::vector<Row> State;
        -:   30:
        -:   31:    State s = State(SIZE, Row(SIZE, ' '));
        -:   32:    bool gameStop = false;
        -:   33:    char currentPlayer = 'X';
        -:   34:    int finalScore = -10;
        -:   35:
        -:   36:    bool thinking = false;
        -:   37:
        -:   38:    PlayScreen playScreen = PlayScreen::PlayModeScreen;
        -:   39:    PlayMode playMode = PlayMode::HumanVsHuman;
        -:   40:
        -:   41:public:
    #####:   42:    PlayScreen getPlayScreen() const { return playScreen; }
------------------
_ZNK9GameState13getPlayScreenEv:
function _ZNK9GameState13getPlayScreenEv called 0 returned 0% blocks executed 0%
    #####:   42:    PlayScreen getPlayScreen() const { return playScreen; }
------------------
_ZNK9GameState13getPlayScreenEv:
function _ZNK9GameState13getPlayScreenEv called 0 returned 0% blocks executed 0%
    #####:   42:    PlayScreen getPlayScreen() const { return playScreen; }
------------------
function _ZN9GameState13setPlayScreenENS_10PlayScreenE called 0 returned 0% blocks executed 0%
    #####:   43:    void setPlayScreen(PlayScreen playScreen_) { playScreen = playScreen_; }
        -:   44:
        -:   45:    PlayMode getPlayMode() const { return playMode; }
function _ZN9GameState11setPlayModeENS_8PlayModeE called 0 returned 0% blocks executed 0%
    #####:   46:    void setPlayMode(PlayMode playMode_) { playMode = playMode_; }
        -:   47:
        -:   48:    // get position i and j from the given index
        -:   49:    char getPlay(unsigned int i, unsigned int j) const;
        -:   50:    char getPlay(int i, int j) const;
        -:   51:
    #####:   52:    bool isGameStop() const { return gameStop; }
------------------
_ZNK9GameState10isGameStopEv:
function _ZNK9GameState10isGameStopEv called 0 returned 0% blocks executed 0%
    #####:   52:    bool isGameStop() const { return gameStop; }
------------------
_ZNK9GameState10isGameStopEv:
function _ZNK9GameState10isGameStopEv called 0 returned 0% blocks executed 0%
    #####:   52:    bool isGameStop() const { return gameStop; }
------------------
function _ZNK9GameState10isThinkingEv called 0 returned 0% blocks executed 0%
    #####:   53:    bool isThinking() const { return thinking; }
        -:   54:
        -:   55:    // reset the game
        -:   56:    void resetGame();
        -:   57:
        -:   58:    // Play the game first with AI
        -:   59:    void computerPlayFirst();
        -:   60:
        -:   61:    // Play the game on the given position
        -:   62:    void playAndChangePlayer(int i, int j);
        -:   63:
        -:   64:    // Get final message to display when game is over
        -:   65:    std::string getFinalMessage() const;
        -:   66:private:
        -:   67:    // toggle player
        -:   68:    void togglePlayer();
        -:   69:
        -:   70:    // Check if the game is over and update the final score
        -:   71:    void checkAndProcessFinalState();
        -:   72:
        -:   73:    // Check if the game is over
        -:   74:    bool isFinalState(State s);
        -:   75:
        -:   76:    // Get the final score
        -:   77:    // 1: X wins, -1: O wins, 0: draw
        -:   78:    int getScoreFinalState(State s);
        -:   79:
        -:   80:    // Get the next player
        -:   81:    char getNextPlayer(State s);
        -:   82:
        -:   83:    // Play the game on the given position
        -:   84:    State play(State s, unsigned int i, unsigned int j, char player);
        -:   85:
        -:   86:    void setPlay(unsigned int i, unsigned int j, char player);
        -:   87:    void setPlay(int i, int j, char player);
        -:   88:
        -:   89:    // Get the next possible states
        -:   90:    std::vector<State> getNextStates(State s);
        -:   91:
        -:   92:    // Get the score of the given state via alpha-beta
        -:   93:    std::pair<int, State> getScore(State s, bool isMaximizingPlayer, int alpha = -100, int beta = 100);
        -:   94:
        -:   95:    // Get the computer play (AI)
        -:   96:    std::pair<unsigned int, unsigned int> getComputerPlay(State s);
        -:   97:
        -:   98:    friend class GameStateTest;
        -:   99:};
        -:  100:
        -:  101:#endif
